#include <ESP8266WiFi.h>  // Inclui a biblioteca ESP8266WiFi para utilizar funções específicas do ESP8266

int qtd_movimentos = 0;  // Declara uma variável para contar os movimentos, inicialmente definida como 0

unsigned long tempoUsado_contabilizarUnicaVez = 500;        // Declarar uma variável que determine um tempo que contabilize o movimento uma única vez
unsigned long tempo_atual = 0;  // Variável que determina o tempo atual em milissegundos, a parti que o microcontrolador for ligado
unsigned long tempo_ultimoMovimento = 0; // Variável usada para registrar o tempo do último movimento 

const int interruptPin = 14;  // Define o pino de interrupção. Pino D5 no ESP8266 corresponde ao GPIO14


void ICACHE_RAM_ATTR somarMovimento(){  // Define a função de interrupção que será chamada quando ocorrer um evento de interrupção
  tempo_atual = millis();               // o tempo atual registra o tempo em milissegundos
  
  
  if (tempo_atual - tempo_ultimoMovimento > tempoUsado_contabilizarUnicaVez){
    qtd_movimentos = qtd_movimentos + 1;  // Incrementa a variável qtd_movimentos em 1 a cada interrupção
    tempo_ultimoMovimento = tempo_atual; // o tempo do ultimo movimento recebe o tempo atual

  }
}


void setup() {
  pinMode(interruptPin, INPUT);  // Configura o pino de interrupção como entrada
  Serial.begin(115200);  // Inicializa a comunicação serial com a taxa de transmissão de 115200 bps



  
  attachInterrupt(digitalPinToInterrupt(interruptPin), somarMovimento, RISING);  // Configura a interrupção no pino definido para acionar na borda de subida
} 

void loop() {
  Serial.println(qtd_movimentos);  // Imprime o valor atual de qtd_movimentos na porta serial
  delay(100);  // Aguarda 100 milissegundos antes de repetir o loop
}
